import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from scipy.signal import find_peaks
from scipy.optimize import curve_fit
from matplotlib import ticker
import cv2
plt.rcParams.update({'font.size': 12})

folder='C:\\Users\\user\\Documents\\Fisica\\L5\\Laboratorio-5\\Practica 2 Espectrometria Laser\\dia 1\\'


# ESTRUCTURA FINA Rubidio 87

# Transiciones 87Rb para el fundamental 5^2S_{1/2} --> 5^2P_{3/2} [MHz]
Saltos_87Rb_aP3_2 = []
Saltos_87Rb_aP3_2.append(384230484.4685) # 5^2S_{1/2} --> 5^2P_{3/2} FUNDAMENTAL
Saltos_87Rb_aP3_2.append(6834.682610904290) #F1_2 5^2S_{1/2}

Saltos_87Rb_aP3_2.append(Saltos_87Rb_aP3_2[0]-(2563.005979089109+302.0738)) #F2_F1 (5^2S_{1/2}-->5^2P_{3/2})

Saltos_87Rb_aP3_2.append(72.2180) #F0_1
Saltos_87Rb_aP3_2.append(156.9470) #F1_2
Saltos_87Rb_aP3_2.append(266.65) #F2_3

# Saltos de transicion entre niveles F de 5^2S_{1/2} --> 5^2P_{3/2}
Saltos_87Rb_aP3_2.append(np.sum(np.array(Saltos_87Rb_aP3_2[1:3])))
Saltos_87Rb_aP3_2.append(np.sum(np.array(Saltos_87Rb_aP3_2[1:4])))
Saltos_87Rb_aP3_2.append(np.sum(np.array(Saltos_87Rb_aP3_2[1:5])))
Saltos_87Rb_aP3_2.append(np.sum(np.array(Saltos_87Rb_aP3_2[1:6])))
Saltos_87Rb_aP3_2.append(np.sum(np.array(Saltos_87Rb_aP3_2[2:4])))
Saltos_87Rb_aP3_2.append(np.sum(np.array(Saltos_87Rb_aP3_2[2:5])))
Saltos_87Rb_aP3_2.append(np.sum(np.array(Saltos_87Rb_aP3_2[2:6])))
Saltos_87Rb_aP3_2.append(np.sum(np.array(Saltos_87Rb_aP3_2[3:5])))
Saltos_87Rb_aP3_2.append(np.sum(np.array(Saltos_87Rb_aP3_2[3:6])))
Saltos_87Rb_aP3_2.append(np.sum(np.array(Saltos_87Rb_aP3_2[4:6])))


# Transiciones 87Rb para el fundamental 5^2S_{1/2} --> 5^2P_{1/2} [MHz]
Saltos_87Rb_aP1_2 = []
Saltos_87Rb_aP1_2.append(377107463.380) # 5^2S_{1/2} --> 5^2P_{1/2} FUNDAMENTAL
Saltos_87Rb_aP1_2.append(6834.682610904290) #F1_2 5^2S_{1/2}

Saltos_87Rb_aP1_2.append(Saltos_87Rb_aP1_2[0]-(2563.005979089109+509.06)) #F2_F1 (5^2S_{1/2}-->5^2P_{1/2})

Saltos_87Rb_aP1_2.append(814.5) #F1_2 5^2P_{1/2}

# Saltos de transicion entre niveles F de 5^2S_{1/2} --> 5^2P_{1/2}
Saltos_87Rb_aP1_2.append(np.sum(np.array(Saltos_87Rb_aP1_2[1:3]))) 
Saltos_87Rb_aP1_2.append(np.sum(np.array(Saltos_87Rb_aP1_2[1:4])))
Saltos_87Rb_aP1_2.append(np.sum(np.array(Saltos_87Rb_aP1_2[2:4])))


# ESTRUCTURA FINA Rubidio 85

# Transiciones 85Rb para el fundamental 5^2S_{1/2} --> 5^2P_{3/2} [MHz]
Saltos_85Rb_aP3_2 = []
Saltos_85Rb_aP3_2.append(384230406.373) # 5^2S_{1/2} --> 5^2P_{3/2} FUNDAMENTAL
Saltos_85Rb_aP3_2.append(3035.7324390) #F2_3 5^2S_{1/2}

Saltos_85Rb_aP3_2.append(Saltos_85Rb_aP3_2[0]-(1264.8885163+113.208)) #F3_F1 (5^2S_{1/2}-->5^2P_{3/2})

Saltos_85Rb_aP3_2.append(29.372) #F1_2
Saltos_85Rb_aP3_2.append(63.401) #F2_3
Saltos_85Rb_aP3_2.append(120.640) #F3_4

# Saltos de transicion entre niveles F de 5^2S_{1/2} --> 5^2P_{3/2}
Saltos_85Rb_aP3_2.append(np.sum(np.array(Saltos_85Rb_aP3_2[1:3]))) 
Saltos_85Rb_aP3_2.append(np.sum(np.array(Saltos_85Rb_aP3_2[1:4])))
Saltos_85Rb_aP3_2.append(np.sum(np.array(Saltos_85Rb_aP3_2[1:5])))
Saltos_85Rb_aP3_2.append(np.sum(np.array(Saltos_85Rb_aP3_2[1:6])))
Saltos_85Rb_aP3_2.append(np.sum(np.array(Saltos_85Rb_aP3_2[2:4])))
Saltos_85Rb_aP3_2.append(np.sum(np.array(Saltos_85Rb_aP3_2[2:5])))
Saltos_85Rb_aP3_2.append(np.sum(np.array(Saltos_85Rb_aP3_2[2:6])))
Saltos_85Rb_aP3_2.append(np.sum(np.array(Saltos_85Rb_aP3_2[3:5])))
Saltos_85Rb_aP3_2.append(np.sum(np.array(Saltos_85Rb_aP3_2[3:6])))
Saltos_85Rb_aP3_2.append(np.sum(np.array(Saltos_85Rb_aP3_2[4:6])))

# Transiciones 85Rb para el fundamental 5^2S_{1/2} --> 5^2P_{1/2} [MHz]
Saltos_85Rb_aP1_2 = []
Saltos_85Rb_aP1_2.append(377107385.690) # 5^2S_{1/2} --> 5^2P_{1/2} FUNDAMENTAL
Saltos_85Rb_aP1_2.append(3035.7324390) #F2_3 5^2S_{1/2}

Saltos_85Rb_aP1_2.append(Saltos_85Rb_aP1_2[0]-(1264.8885163+210.923)) #F3_F2 (5^2S_{1/2}-->5^2P_{1/2})

Saltos_85Rb_aP1_2.append(361.58) #F2_3 5^2P_{1/2}

# Saltos de transicion entre niveles F de 5^2S_{1/2} --> 5^2P_{1/2}
Saltos_85Rb_aP1_2.append(np.sum(np.array(Saltos_85Rb_aP1_2[1:3])))
Saltos_85Rb_aP1_2.append(np.sum(np.array(Saltos_85Rb_aP1_2[1:4])))
Saltos_85Rb_aP1_2.append(np.sum(np.array(Saltos_85Rb_aP1_2[2:4])))

# Eliminacion de transiciones en THz
Saltos_87Rb_aP1_2=np.array(Saltos_87Rb_aP1_2)[np.array(Saltos_87Rb_aP1_2)>50000]/1000000
Saltos_87Rb_aP3_2=np.array(Saltos_87Rb_aP3_2)[np.array(Saltos_87Rb_aP3_2)>50000]/1000000
Saltos_85Rb_aP1_2=np.array(Saltos_85Rb_aP1_2)[np.array(Saltos_85Rb_aP1_2)>50000]/1000000
Saltos_85Rb_aP3_2=np.array(Saltos_85Rb_aP3_2)[np.array(Saltos_85Rb_aP3_2)>50000]/1000000

zeros_aP1_2=np.zeros(len(Saltos_85Rb_aP1_2))
zeros_aP3_2=np.zeros(len(Saltos_85Rb_aP3_2))

# DATOS
tiempo3,datos3=np.genfromtxt(folder+'Captura_2.txt',delimiter=',',skip_header=1,unpack=True)
tiempo4,datos4=np.genfromtxt(folder+'Captura_2_filtrada.txt',delimiter=',',skip_header=1,unpack=True)


# Defino una funcion para gaussiana para ajustar los picos de cada variedad
def varied_gauss(x,ancho1,ancho2,ancho3,ancho4,c1,c2,c3,c4,a1,a2,a3,a4,r1,r2):
    fun = a1*np.exp(-1/2*((x-c1)/(ancho1))**2)+a2*np.exp(-1/2*((x-c2)/(ancho2))**2)+a3*np.exp(-1/2*((x-c3)/(ancho3))**2)+a4*np.exp(-1/2*((x-c4)/(ancho4))**2)+r1*x+r2
    return fun

# Candidatos de ajuste por busqueda de picos en los datos:
peaks_ind=find_peaks(-datos4,height=0.002,distance=150)[0]

# Ajuste de los datos con varied_gauss
popt,pcov=curve_fit(varied_gauss,tiempo3,datos3,p0=[0.0001,0.0001,0.0001,0.0001,
                                               tiempo3[peaks_ind[0]],
                                               tiempo3[peaks_ind[1]],
                                               tiempo3[peaks_ind[2]],
                                               tiempo3[peaks_ind[3]],
                                               datos3[peaks_ind[0]],
                                               datos3[peaks_ind[1]],
                                               datos3[peaks_ind[2]],
                                               datos3[peaks_ind[3]],1,1])
perr=np.sqrt(np.diag(pcov))


D1 = np.concatenate((Saltos_85Rb_aP1_2[1:],Saltos_87Rb_aP1_2[1:]))
D2 = np.concatenate((Saltos_85Rb_aP3_2[1:],Saltos_87Rb_aP3_2[1:]))

def desv(kmeans,D):
    des=np.zeros(len(kmeans.cluster_centers_[:,0]))
    prom=[]
    for ind in range(len(kmeans.cluster_centers_[:,0])):
        des[ind]=np.std(D[kmeans.labels_==ind])
        prom.append(np.mean(D[kmeans.labels_==ind]))
    des=des[np.argsort(prom)]
    return des[::-1]

# Encuentro centroides de los 4 picos con un Clastering K-Means de la linea D1
k_means = KMeans(n_clusters=4).fit(np.c_[D1,np.ones(len(D1))])
centros = k_means.cluster_centers_
centros = sorted(centros[:,0],reverse=True)
des = desv(k_means,D1)
print(centros)

k_means2 = KMeans(n_clusters=4).fit(np.c_[D2,np.ones(len(D2))])
centros2 = k_means2.cluster_centers_
centros2 = sorted(centros2[:,0],reverse=True)
des2 = desv(k_means2,D2)

plt.figure()
plt.plot(tiempo3*1000,datos3*1000,label='Fotodetector')
plt.plot(tiempo3[peaks_ind]*1000,datos3[peaks_ind]*1000,'.',label='Picos detectados')
plt.plot(tiempo3*1000,varied_gauss(tiempo3,*popt)*1000,label='Ajuste gaussiano')
plt.ylabel('Voltaje [mV]')
plt.xlabel('Tiempo [ms]')
plt.xlim([0,4])
plt.legend()


plt.figure()
plt.errorbar(np.array([popt[5],popt[6]])*1000,np.array([centros[1],centros[2]]),yerr=np.array([des[1],des[2]]), marker='^', mfc='red', mec='red',ecolor='red',ls='',label=r'$\Delta \bar{E}$ $^{85}$Rb [$D_1$]')
plt.errorbar(np.array([popt[4],popt[7]])*1000,np.array([centros[0],centros[3]]),yerr=np.array([des[0],des[3]]), marker='^', mfc='green', mec='green',ecolor='green',ls='',label=r'$\Delta \bar{E}$ $^{87}$Rb [$D_1$]')
plt.gca().yaxis.set_major_formatter(ticker.StrMethodFormatter("{x:.3f}"))
# Ajuste lineal
coef=np.polyfit(popt[4:8]*1000,centros,1)
print(coef)
plt.plot(tiempo3*1000, tiempo3*1000*coef[0]+coef[1],'-b',label='Ajuste lineal')
plt.ylim([377.103,377.113])
plt.xlim([0.5,4])
plt.yticks(rotation = 90,va='center')
plt.text(plt.gca().get_xlim()[0]+0.5,plt.gca().get_ylim()[0]+0.001,f'E/h={coef[0]:.2}·t+{coef[1]:.6}')
plt.ylabel('E/h [THz]')
plt.xlabel('Tiempo [ms]')
plt.legend()


# Plot con eje de frecuencia
datos3_norm=datos3-(popt[-2]*tiempo3+popt[-1])
datos3_norm-=datos3_norm.min()
datos3_norm/=datos3_norm.max()
ajust_norm=varied_gauss(tiempo3,*popt)-(popt[-2]*tiempo3+popt[-1])
ajust_norm-=ajust_norm.min()
ajust_norm/=ajust_norm.max()/0.98

fig,ax=plt.subplots()
ax.plot(tiempo3*1000*coef[0]+coef[1],datos3_norm,label='Absorción Normalizada')
ax.plot(tiempo3[peaks_ind]*1000*coef[0]+coef[1],datos3_norm[peaks_ind],'.',label='Picos detectados')
ax.plot(tiempo3*1000*coef[0]+coef[1],ajust_norm,label='Ajuste gaussiano')
ax.vlines([centros[1],centros[2]],-0.3,np.array([datos3_norm[peaks_ind[1]],datos3_norm[peaks_ind[2]]])-0.05, linestyle='dashdot')
ax.vlines([centros[0],centros[3]],-0.6,np.array([datos3_norm[peaks_ind[0]],datos3_norm[peaks_ind[3]]])-0.05, linestyle='dashdot')
#ax.plot(Saltos_85Rb_aP3_2[0],unos_aP3_2[0],'or',markersize=5)
ax.plot(Saltos_85Rb_aP1_2[1:],zeros_aP1_2[1:]+1,'^r',label=r'$\Delta E$ $^{85}$Rb $D_1$[$5^2S_{1/2} \rightarrow 5^2P_{1/2}$]'+'\nAbundancia 72.17%',markersize=4)
#ax.plot(Saltos_87Rb_aP3_2[0],unos_aP3_2[0],'og',markersize=5)
ax.plot(Saltos_87Rb_aP1_2[1:],zeros_aP1_2[1:]+1,'^g',label=r'$\Delta E$ $^{87}$Rb $D_1$[$5^2S_{1/2} \rightarrow 5^2P_{1/2}$]'+'\nAbundancia 27.83%',markersize=4)
ax.set_xlabel(r'Frecuencia $E/h$ [THz]')
ax.annotate('', xy=(centros[1], -0.3), xytext=(centros[2], -0.3),
            arrowprops=dict(arrowstyle='<->'))
ax.text(np.mean([centros[1],centros[2]]), -0.25, fr'{1000*(centros[1]-centros[2]):1.4} $\pm$ {3*np.mean([perr[5]*1000*np.abs(coef[0]),perr[6]*1000*np.abs(coef[0])])*1000:0.1} GHz',
        horizontalalignment='center')
ax.annotate('', xy=(centros[0], -0.6), xytext=(centros[3], -0.6),
            arrowprops=dict(arrowstyle='<->'))
ax.annotate(r'$\Delta F_{(2,1^\prime)}$', xy=(Saltos_85Rb_aP1_2[1], 0.98), xytext=(Saltos_85Rb_aP1_2[1], 0.85),
            arrowprops=dict(arrowstyle='->'),ha='center')
ax.annotate(r'$\Delta F_{(1,1^\prime)}$', xy=(Saltos_85Rb_aP1_2[2], 0.98), xytext=(Saltos_85Rb_aP1_2[2], 0.7),
            arrowprops=dict(arrowstyle='->'),ha='center')
ax.annotate(r'$\Delta F_{(1,2^\prime)}$', xy=(Saltos_85Rb_aP1_2[3], 0.98), xytext=(Saltos_85Rb_aP1_2[3], 0.85),
            arrowprops=dict(arrowstyle='->'),ha='center')
ax.annotate(r'$\Delta F_{(2,2^\prime)}$', xy=(Saltos_85Rb_aP1_2[4], 0.98), xytext=(Saltos_85Rb_aP1_2[4], 0.7),
            arrowprops=dict(arrowstyle='->'),ha='center')
ax.annotate(r'$\Delta F_{(2,1^\prime)}$', xy=(Saltos_87Rb_aP1_2[1], 1.02), xytext=(Saltos_87Rb_aP1_2[1], 1.15),
            arrowprops=dict(arrowstyle='->'),ha='center')
ax.annotate(r'$\Delta F_{(1,1^\prime)}$', xy=(Saltos_87Rb_aP1_2[2], 1.02), xytext=(Saltos_87Rb_aP1_2[2], 1.15),
            arrowprops=dict(arrowstyle='->'),ha='center')
ax.annotate(r'$\Delta F_{(1,2^\prime)}$', xy=(Saltos_87Rb_aP1_2[3], 1.02), xytext=(Saltos_87Rb_aP1_2[3], 1.15),
            arrowprops=dict(arrowstyle='->'),ha='center')
ax.annotate(r'$\Delta F_{(2,2^\prime)}$', xy=(Saltos_87Rb_aP1_2[4], 1.02), xytext=(Saltos_87Rb_aP1_2[4], 1.15),
            arrowprops=dict(arrowstyle='->'),ha='center')
#tit=ax.text(np.mean([Saltos_85Rb_aP1_2[0],Saltos_87Rb_aP1_2[0]]),1.2,r'Linea $D_1$ [$5^2S_{1/2} \rightarrow 5^2P_{1/2}$] de los isotopos $^{87}$Rb y $^{85}$Rb',ha='center')
#tit.set_bbox(dict(facecolor='orange', alpha=0.5))
ax.text(np.mean([centros[0],centros[3]]), -0.55, fr'{1000*(centros[0]-centros[3]):1.4} $\pm$ {3*np.mean([perr[4]*1000*np.abs(coef[0]),perr[7]*1000*np.abs(coef[0])])*1000:0.1} GHz',
        horizontalalignment='center')
ax.legend()
ax.set_xlim([377.1020,377.1140])
ax.set_ylim([-0.75,1.3])
ax.xaxis.set_major_formatter(ticker.StrMethodFormatter("{x:.3f}"))
ax.set_yticks([])

def long_onda(x):
    return 299792458/(x*1E6)*1E3

secax=ax.secondary_xaxis('top',functions=(long_onda,long_onda))
secax.set_xlabel('Longitud de onda $\lambda$ [nm]')
secax.xaxis.set_major_formatter(ticker.StrMethodFormatter("{x:.3f}"))
secax.set_xticks(long_onda(np.arange(377.1020,377.1160,0.002)))
#plt.grid()


# CON CAMPO MAGNETICO
tiempo5,datos5_1,datos5_2,resta=np.genfromtxt(folder+'Captura_3_resta_offset_correc.txt',delimiter=',',skip_header=1,unpack=True)
tiempo5_3,datos5_3=np.genfromtxt(folder+'Captura_3_resta_detector.txt',delimiter=',',skip_header=1,unpack=True)
resta*=-1

# Ajuste de los datos con varied_gauss
popt,pcov=curve_fit(varied_gauss,tiempo5,datos5_1,p0=[0.0001,0.0001,0.0001,0.0001,
                                                    0.0009,
                                                    0.0017,
                                                    0.00261,
                                                    0.00309,
                                                    0.02,
                                                    0.02,
                                                    0.02,
                                                    0.02,1,1])
perr=np.sqrt(np.diag(pcov))
datos5_1_fit=varied_gauss(tiempo5,*popt)
datos5_1-=(popt[-2]*tiempo5+popt[-1])
datos5_1_fit-=(popt[-2]*tiempo5+popt[-1])
popt,pcov=curve_fit(varied_gauss,tiempo5,datos5_2,p0=[0.0001,0.0001,0.0001,0.0001,
                                                    0.0009,
                                                    0.0017,
                                                    0.00261,
                                                    0.00309,
                                                    0.02,
                                                    0.02,
                                                    0.02,
                                                    0.02,1,1])
perr=np.sqrt(np.diag(pcov))
datos5_2_fit=varied_gauss(tiempo5,*popt)
datos5_2-=(popt[-2]*tiempo5+popt[-1])
datos5_2_fit-=(popt[-2]*tiempo5+popt[-1])

plt.figure()
plt.plot(tiempo5,datos5_1,label='Canal 1')
plt.plot(tiempo5,datos5_1_fit,'--',label='Canal 1 fit')
plt.plot(tiempo5,datos5_2,label='Canal 2')
plt.plot(tiempo5,datos5_2_fit,'--',label='Canal 1 fit')
plt.plot(tiempo5,resta,label='Resta')
#plt.plot(tiempo5,datos5_2-datos5_1,label='Resta 1-2')
#plt.plot(tiempo5_3,datos5_3,label='Resta detector')

'''
ind_p1_resta=find_peaks(resta,distance=150,prominence=0.001)[0]
ind_p2_resta=find_peaks(-resta,distance=150,prominence=0.001)[0]

ind_p1_restaD=find_peaks(datos5_3,distance=150,prominence=0.009)[0]
ind_p2_restaD=find_peaks(-datos5_3,distance=150,prominence=0.009)[0]
print(f'ultimo pico restaD: {ind_p2_restaD}')
plt.plot([tiempo5[ind_p1_resta],tiempo5[ind_p2_resta]],[resta[ind_p1_resta],resta[ind_p2_resta]],'.',label='picos_resta')
plt.plot([tiempo5_3[ind_p1_restaD],tiempo5_3[ind_p2_restaD]],[datos5_3[ind_p1_restaD],datos5_3[ind_p2_restaD]],'.',label='picos_restaD')

picos_resta_x=np.concatenate((tiempo5[ind_p1_resta],tiempo5[ind_p2_resta]))
picos_resta_y=np.concatenate((resta[ind_p1_resta],resta[ind_p2_resta]))
picos_resta=np.c_[picos_resta_x,picos_resta_y]
picos_restaD_x=np.concatenate((tiempo5_3[ind_p1_restaD],tiempo5_3[ind_p2_restaD]))
picos_restaD_y=np.concatenate((datos5_3[ind_p1_restaD],datos5_3[ind_p2_restaD]))
picos_restaD=np.c_[picos_restaD_x,picos_restaD_y]

RT= cv2.getAffineTransform((picos_restaD[np.arange(1,7,2),:]).astype(np.float32), (picos_resta[np.arange(1,7,2),:]).astype(np.float32))
picos_restaD_alin=np.dot(RT[:,0:2],np.vstack((tiempo5_3,datos5_3))).T+np.c_[(RT[:,-1])[0]*np.ones(len(tiempo5_3)),(RT[:,-1])[1]*np.ones(len(tiempo5_3))]
plt.plot(picos_restaD_alin[:,0],picos_restaD_alin[:,1],'-b',label='Resta detector corregida')
'''

pbajos=500
datos5_resta_filtrada=np.real(np.fft.ifft(np.fft.fft(datos5_2-datos5_1)*np.hstack((np.ones(pbajos),np.zeros(len(datos5_3)-2*pbajos),np.ones(pbajos)))))
plt.plot(tiempo5,datos5_resta_filtrada,label='Resta 1-2 con filtro fft')

plt.legend()

plt.show()
