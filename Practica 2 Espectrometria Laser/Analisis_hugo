import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from scipy.signal import find_peaks
from scipy.optimize import curve_fit
from scipy.signal import argrelmin
from matplotlib import ticker
plt.rcParams.update({'font.size': 12})
import pandas as pd

folder='/home/hugo_sosa/Documents/L5/Laboratorio-5/Practica 2 Espectrometria Laser/dia 1/'


# ESTRUCTURA FINA Rubidio 87

# Transiciones 87Rb para el fundamental 5^2S_{1/2} --> 5^2P_{3/2} [MHz]
Saltos_87Rb_aP3_2 = []
Saltos_87Rb_aP3_2.append(384230484.4685) # 5^2S_{1/2} --> 5^2P_{3/2} FUNDAMENTAL
Saltos_87Rb_aP3_2.append(6834.682610904290) #F1_2 5^2S_{1/2}

Saltos_87Rb_aP3_2.append(Saltos_87Rb_aP3_2[0]-(2563.005979089109+302.0738)) #F2_F1 (5^2S_{1/2}-->5^2P_{3/2})

Saltos_87Rb_aP3_2.append(72.2180) #F0_1
Saltos_87Rb_aP3_2.append(156.9470) #F1_2
Saltos_87Rb_aP3_2.append(266.65) #F2_3

# Saltos de transicion entre niveles F de 5^2S_{1/2} --> 5^2P_{3/2}
Saltos_87Rb_aP3_2.append(np.sum(np.array(Saltos_87Rb_aP3_2[1:3])))
Saltos_87Rb_aP3_2.append(np.sum(np.array(Saltos_87Rb_aP3_2[1:4])))
Saltos_87Rb_aP3_2.append(np.sum(np.array(Saltos_87Rb_aP3_2[1:5])))
Saltos_87Rb_aP3_2.append(np.sum(np.array(Saltos_87Rb_aP3_2[1:6])))
Saltos_87Rb_aP3_2.append(np.sum(np.array(Saltos_87Rb_aP3_2[2:4])))
Saltos_87Rb_aP3_2.append(np.sum(np.array(Saltos_87Rb_aP3_2[2:5])))
Saltos_87Rb_aP3_2.append(np.sum(np.array(Saltos_87Rb_aP3_2[2:6])))
Saltos_87Rb_aP3_2.append(np.sum(np.array(Saltos_87Rb_aP3_2[3:5])))
Saltos_87Rb_aP3_2.append(np.sum(np.array(Saltos_87Rb_aP3_2[3:6])))
Saltos_87Rb_aP3_2.append(np.sum(np.array(Saltos_87Rb_aP3_2[4:6])))


# Transiciones 87Rb para el fundamental 5^2S_{1/2} --> 5^2P_{1/2} [MHz]
Saltos_87Rb_aP1_2 = []
Saltos_87Rb_aP1_2.append(377107463.380) # 5^2S_{1/2} --> 5^2P_{1/2} FUNDAMENTAL
Saltos_87Rb_aP1_2.append(6834.682610904290) #F1_2 5^2S_{1/2}

Saltos_87Rb_aP1_2.append(Saltos_87Rb_aP1_2[0]-(2563.005979089109+509.06)) #F2_F1 (5^2S_{1/2}-->5^2P_{1/2})

Saltos_87Rb_aP1_2.append(814.5) #F1_2 5^2P_{1/2}

# Saltos de transicion entre niveles F de 5^2S_{1/2} --> 5^2P_{1/2}
Saltos_87Rb_aP1_2.append(np.sum(np.array(Saltos_87Rb_aP1_2[1:3]))) 
Saltos_87Rb_aP1_2.append(np.sum(np.array(Saltos_87Rb_aP1_2[1:4])))
Saltos_87Rb_aP1_2.append(np.sum(np.array(Saltos_87Rb_aP1_2[2:4])))


# ESTRUCTURA FINA Rubidio 85

# Transiciones 85Rb para el fundamental 5^2S_{1/2} --> 5^2P_{3/2} [MHz]
Saltos_85Rb_aP3_2 = []
Saltos_85Rb_aP3_2.append(384230406.373) # 5^2S_{1/2} --> 5^2P_{3/2} FUNDAMENTAL
Saltos_85Rb_aP3_2.append(3035.7324390) #F2_3 5^2S_{1/2}

Saltos_85Rb_aP3_2.append(Saltos_85Rb_aP3_2[0]-(1264.8885163+113.208)) #F3_F1 (5^2S_{1/2}-->5^2P_{3/2})

Saltos_85Rb_aP3_2.append(29.372) #F1_2
Saltos_85Rb_aP3_2.append(63.401) #F2_3
Saltos_85Rb_aP3_2.append(120.640) #F3_4

# Saltos de transicion entre niveles F de 5^2S_{1/2} --> 5^2P_{3/2}
Saltos_85Rb_aP3_2.append(np.sum(np.array(Saltos_85Rb_aP3_2[1:3]))) 
Saltos_85Rb_aP3_2.append(np.sum(np.array(Saltos_85Rb_aP3_2[1:4])))
Saltos_85Rb_aP3_2.append(np.sum(np.array(Saltos_85Rb_aP3_2[1:5])))
Saltos_85Rb_aP3_2.append(np.sum(np.array(Saltos_85Rb_aP3_2[1:6])))
Saltos_85Rb_aP3_2.append(np.sum(np.array(Saltos_85Rb_aP3_2[2:4])))
Saltos_85Rb_aP3_2.append(np.sum(np.array(Saltos_85Rb_aP3_2[2:5])))
Saltos_85Rb_aP3_2.append(np.sum(np.array(Saltos_85Rb_aP3_2[2:6])))
Saltos_85Rb_aP3_2.append(np.sum(np.array(Saltos_85Rb_aP3_2[3:5])))
Saltos_85Rb_aP3_2.append(np.sum(np.array(Saltos_85Rb_aP3_2[3:6])))
Saltos_85Rb_aP3_2.append(np.sum(np.array(Saltos_85Rb_aP3_2[4:6])))

# Transiciones 85Rb para el fundamental 5^2S_{1/2} --> 5^2P_{1/2} [MHz]
Saltos_85Rb_aP1_2 = []
Saltos_85Rb_aP1_2.append(377107385.690) # 5^2S_{1/2} --> 5^2P_{1/2} FUNDAMENTAL
Saltos_85Rb_aP1_2.append(3035.7324390) #F2_3 5^2S_{1/2}

Saltos_85Rb_aP1_2.append(Saltos_85Rb_aP1_2[0]-(1264.8885163+210.923)) #F3_F2 (5^2S_{1/2}-->5^2P_{1/2})

Saltos_85Rb_aP1_2.append(361.58) #F2_3 5^2P_{1/2}

# Saltos de transicion entre niveles F de 5^2S_{1/2} --> 5^2P_{1/2}
Saltos_85Rb_aP1_2.append(np.sum(np.array(Saltos_85Rb_aP1_2[1:3])))
Saltos_85Rb_aP1_2.append(np.sum(np.array(Saltos_85Rb_aP1_2[1:4])))
Saltos_85Rb_aP1_2.append(np.sum(np.array(Saltos_85Rb_aP1_2[2:4])))

# Eliminacion de transiciones en THz
Saltos_87Rb_aP1_2=np.array(Saltos_87Rb_aP1_2)[np.array(Saltos_87Rb_aP1_2)>50000]/1000000
Saltos_87Rb_aP3_2=np.array(Saltos_87Rb_aP3_2)[np.array(Saltos_87Rb_aP3_2)>50000]/1000000
Saltos_85Rb_aP1_2=np.array(Saltos_85Rb_aP1_2)[np.array(Saltos_85Rb_aP1_2)>50000]/1000000
Saltos_85Rb_aP3_2=np.array(Saltos_85Rb_aP3_2)[np.array(Saltos_85Rb_aP3_2)>50000]/1000000

zeros_aP1_2=np.zeros(len(Saltos_85Rb_aP1_2))
zeros_aP3_2=np.zeros(len(Saltos_85Rb_aP3_2))

# DATOS
tiempo3,datos3=np.genfromtxt(folder+'Captura_2.txt',delimiter=',',skip_header=1,unpack=True)
tiempo4,datos4=np.genfromtxt(folder+'Captura_2_filtrada.txt',delimiter=',',skip_header=1,unpack=True)


# Defino una funcion para gaussiana para ajustar los picos de cada variedad
def varied_gauss(x,ancho1,ancho2,ancho3,ancho4,c1,c2,c3,c4,a1,a2,a3,a4,r1,r2):
    fun = a1*np.exp(-1/2*((x-c1)/(ancho1))**2)+a2*np.exp(-1/2*((x-c2)/(ancho2))**2)+a3*np.exp(-1/2*((x-c3)/(ancho3))**2)+a4*np.exp(-1/2*((x-c4)/(ancho4))**2)+r1*x+r2
    return fun

# Candidatos de ajuste por busqueda de picos en los datos:
peaks_ind=find_peaks(-datos4,height=0.002,distance=150)[0]

# Ajuste de los datos con varied_gauss
popt,pcov=curve_fit(varied_gauss,tiempo3,datos3,p0=[0.0001,0.0001,0.0001,0.0001,
                                               tiempo3[peaks_ind[0]],
                                               tiempo3[peaks_ind[1]],
                                               tiempo3[peaks_ind[2]],
                                               tiempo3[peaks_ind[3]],
                                               datos3[peaks_ind[0]],
                                               datos3[peaks_ind[1]],
                                               datos3[peaks_ind[2]],
                                               datos3[peaks_ind[3]],1,1])
perr=np.sqrt(np.diag(pcov))

print('AJUSTE GAUSSIANO SIN CAMPO B')
tabla_ajustes_0=pd.DataFrame({'Semiancho de Gaussianas': [popt[0],popt[1],popt[2],popt[3]],
                             'Errores de semiancho': [perr[0],perr[1],perr[2],perr[3]],
                             'Centros de Gaussianas': [popt[4],popt[5],popt[6],popt[7]],
                             'Errores de centro': [perr[4],perr[5],perr[6],perr[7]],
                             'Amplitud de gaussiana': [popt[8],popt[9],popt[10],popt[11]],
                             'Errores de amplitud': [perr[8],perr[9],perr[10],perr[11]],
                             'Pendiente y Ord. al origen': [popt[12],popt[13],' ',' '],
                             'Errores de Pend. y Ord.': [perr[12],perr[13],' ',' ']})
print(tabla_ajustes_0)
tabla_ajustes_0.to_csv('tabla_ajustes_sinB.txt', index=None, sep='\t', mode='a')

D1 = np.concatenate((Saltos_85Rb_aP1_2[1:],Saltos_87Rb_aP1_2[1:]))
D2 = np.concatenate((Saltos_85Rb_aP3_2[1:],Saltos_87Rb_aP3_2[1:]))

def desv(kmeans,D):
    des=np.zeros(len(kmeans.cluster_centers_[:,0]))
    prom=[]
    for ind in range(len(kmeans.cluster_centers_[:,0])):
        des[ind]=np.std(D[kmeans.labels_==ind])
        prom.append(np.mean(D[kmeans.labels_==ind]))
    des=des[np.argsort(prom)]
    return des[::-1]

# Encuentro centroides de los 4 picos con un Clastering K-Means de la linea D1
k_means = KMeans(n_clusters=4).fit(np.c_[D1,np.ones(len(D1))])
centros = k_means.cluster_centers_
centros = sorted(centros[:,0],reverse=True)
des = desv(k_means,D1)
print(centros)

k_means2 = KMeans(n_clusters=4).fit(np.c_[D2,np.ones(len(D2))])
centros2 = k_means2.cluster_centers_
centros2 = sorted(centros2[:,0],reverse=True)
des2 = desv(k_means2,D2)

plt.figure()
plt.plot(tiempo3*1000,datos3*1000,label=r'Fotodetector $FD$')
plt.plot(tiempo3*1000,varied_gauss(tiempo3,*popt)*1000,label='Ajuste gaussiano')
plt.plot(tiempo3[peaks_ind]*1000,datos3[peaks_ind]*1000,'.',label='Picos detectados')
plt.ylabel('Voltaje [mV]')
plt.xlabel('Tiempo [ms]')
plt.xlim([0,4])
plt.legend()


plt.figure()
plt.errorbar(np.array([popt[5],popt[6]])*1000,np.array([centros[1],centros[2]]),yerr=np.array([des[1],des[2]]), 
             marker='^', mfc='red', mec='red',ecolor='red',ls='',label=r'$\Delta \bar{E}$ $^{85}$Rb [$D_1$]')
plt.errorbar(np.array([popt[4],popt[7]])*1000,np.array([centros[0],centros[3]]),yerr=np.array([des[0],des[3]]), 
             marker='^', mfc='green', mec='green',ecolor='green',ls='',label=r'$\Delta \bar{E}$ $^{87}$Rb [$D_1$]')
plt.gca().yaxis.set_major_formatter(ticker.StrMethodFormatter("{x:.3f}"))
# Ajuste lineal
coef=np.polyfit(popt[4:8]*1000,centros,1)
print(coef)
plt.plot(tiempo3*1000, tiempo3*1000*coef[0]+coef[1],'-b',label='Ajuste lineal')
plt.ylim([377.103,377.113])
plt.xlim([0.5,4])
plt.yticks(rotation = 90,va='center')
plt.text(plt.gca().get_xlim()[0]+0.5,plt.gca().get_ylim()[0]+0.001,f'E/h={coef[0]:.2}Â·t+{coef[1]:.6}')
plt.ylabel('E/h [THz]')
plt.xlabel('Tiempo [ms]')
plt.legend()


# Plot con eje de frecuencia
datos3_norm=datos3-(popt[-2]*tiempo3+popt[-1])
datos3_norm-=datos3_norm.min()
datos3_norm/=datos3_norm.max()
ajust_norm=varied_gauss(tiempo3,*popt)-(popt[-2]*tiempo3+popt[-1])
ajust_norm-=ajust_norm.min()
ajust_norm/=ajust_norm.max()/0.98

fig,ax=plt.subplots()
ax.plot(tiempo3*1000*coef[0]+coef[1],datos3_norm,label=r'Fotodetector $FD$')
ax.plot(tiempo3*1000*coef[0]+coef[1],ajust_norm,label='Ajuste gaussiano')
ax.plot(tiempo3[peaks_ind]*1000*coef[0]+coef[1],datos3_norm[peaks_ind],'.k',label='Picos detectados')
ax.vlines([centros[1],centros[2]],-0.3,np.array([datos3_norm[peaks_ind[1]],datos3_norm[peaks_ind[2]]])-0.05, linestyle='dashdot',color='gray')
ax.vlines([centros[0],centros[3]],-0.6,np.array([datos3_norm[peaks_ind[0]],datos3_norm[peaks_ind[3]]])-0.05, linestyle='dashdot',color='gray')
#ax.plot(Saltos_85Rb_aP3_2[0],unos_aP3_2[0],'or',markersize=5)
ax.plot(Saltos_85Rb_aP1_2[1:],zeros_aP1_2[1:]+1,'^r',label=r'$\Delta E$ $^{85}$Rb$_{D1}$',markersize=4)
#ax.plot(Saltos_87Rb_aP3_2[0],unos_aP3_2[0],'og',markersize=5)
ax.plot(Saltos_87Rb_aP1_2[1:],zeros_aP1_2[1:]+1,'^g',label=r'$\Delta E$ $^{87}$Rb$_{D1}$',markersize=4)
ax.set_xlabel(r'Frecuencia $E/h$ [THz]')
ax.set_ylabel('AbsorciÃ³n Normalizada')
ax.annotate('', xy=(centros[1], -0.3), xytext=(centros[2], -0.3),
            arrowprops=dict(arrowstyle='<->'))
ax.text(np.mean([centros[1],centros[2]]), -0.25, fr'{1000*(centros[1]-centros[2]):1.4} $\pm$ {3*np.mean([perr[5]*1000*np.abs(coef[0]),perr[6]*1000*np.abs(coef[0])])*1000:0.1} GHz',
        horizontalalignment='center')
ax.annotate('', xy=(centros[0], -0.6), xytext=(centros[3], -0.6),
            arrowprops=dict(arrowstyle='<->'))
ax.annotate(r'$\Delta F_{(2,1^\prime)}$', xy=(Saltos_85Rb_aP1_2[1], 0.98), xytext=(Saltos_85Rb_aP1_2[1], 0.85),
            arrowprops=dict(arrowstyle='->'),ha='center')
ax.annotate(r'$\Delta F_{(1,1^\prime)}$', xy=(Saltos_85Rb_aP1_2[2], 0.98), xytext=(Saltos_85Rb_aP1_2[2], 0.7),
            arrowprops=dict(arrowstyle='->'),ha='center')
ax.annotate(r'$\Delta F_{(1,2^\prime)}$', xy=(Saltos_85Rb_aP1_2[3], 0.98), xytext=(Saltos_85Rb_aP1_2[3], 0.85),
            arrowprops=dict(arrowstyle='->'),ha='center')
ax.annotate(r'$\Delta F_{(2,2^\prime)}$', xy=(Saltos_85Rb_aP1_2[4], 0.98), xytext=(Saltos_85Rb_aP1_2[4], 0.7),
            arrowprops=dict(arrowstyle='->'),ha='center')
ax.annotate(r'$\Delta F_{(2,1^\prime)}$', xy=(Saltos_87Rb_aP1_2[1], 1.02), xytext=(Saltos_87Rb_aP1_2[1], 1.15),
            arrowprops=dict(arrowstyle='->'),ha='center')
ax.annotate(r'$\Delta F_{(1,1^\prime)}$', xy=(Saltos_87Rb_aP1_2[2], 1.02), xytext=(Saltos_87Rb_aP1_2[2], 1.15),
            arrowprops=dict(arrowstyle='->'),ha='center')
ax.annotate(r'$\Delta F_{(1,2^\prime)}$', xy=(Saltos_87Rb_aP1_2[3], 1.02), xytext=(Saltos_87Rb_aP1_2[3], 1.15),
            arrowprops=dict(arrowstyle='->'),ha='center')
ax.annotate(r'$\Delta F_{(2,2^\prime)}$', xy=(Saltos_87Rb_aP1_2[4], 1.02), xytext=(Saltos_87Rb_aP1_2[4], 1.15),
            arrowprops=dict(arrowstyle='->'),ha='center')
#tit=ax.text(np.mean([Saltos_85Rb_aP1_2[0],Saltos_87Rb_aP1_2[0]]),1.2,r'Linea $D_1$ [$5^2S_{1/2} \rightarrow 5^2P_{1/2}$] de los isotopos $^{87}$Rb y $^{85}$Rb',ha='center')
#tit.set_bbox(dict(facecolor='orange', alpha=0.5))
ax.text(np.mean([centros[0],centros[3]]), -0.55, fr'{1000*(centros[0]-centros[3]):1.4} $\pm$ {3*np.mean([perr[4]*1000*np.abs(coef[0]),perr[7]*1000*np.abs(coef[0])])*1000:0.1} GHz',
        horizontalalignment='center')
ax.legend()
ax.set_xlim([377.1020,377.1140])
ax.set_ylim([-0.75,1.3])
ax.xaxis.set_major_formatter(ticker.StrMethodFormatter("{x:.3f}"))
ax.set_yticks([])

def long_onda(x):
    return 299792458/(x*1E6)*1E3

secax=ax.secondary_xaxis('top',functions=(long_onda,long_onda))
secax.set_xlabel('Longitud de onda $\lambda$ [nm]')
secax.xaxis.set_major_formatter(ticker.StrMethodFormatter("{x:.3f}"))
secax.set_xticks(long_onda(np.arange(377.1020,377.1160,0.002)))

# CON CAMPO MAGNETICO
tiempo5,datos5_1,datos5_2,resta=np.genfromtxt(folder+'Captura_3_resta_offset_correc.txt',delimiter=',',skip_header=1,unpack=True)
tiempo5_3,datos5_3=np.genfromtxt(folder+'Captura_3_resta_detector.txt',delimiter=',',skip_header=1,unpack=True)
resta*=-1

# Ajuste de los datos con varied_gauss
popt1,pcov1=curve_fit(varied_gauss,tiempo5,datos5_1,p0=[0.0001,0.0001,0.0001,0.0001,
                                                    0.0009,
                                                    0.0017,
                                                    0.00261,
                                                    0.00309,
                                                    0.02,
                                                    0.02,
                                                    0.02,
                                                    0.02,1,1])
perr1=np.sqrt(np.diag(pcov1))
datos5_1_fit=varied_gauss(tiempo5,*popt1)

print('AJUSTES GAUSSIANOS CON CAMPO B')
tabla_ajustes_1=pd.DataFrame({'Semiancho de Gaussianas': [popt1[0],popt1[1],popt1[2],popt1[3]],
                             'Errores de semiancho': [perr1[0],perr1[1],perr1[2],perr1[3]],
                             'Centros de Gaussianas': [popt1[4],popt1[5],popt1[6],popt1[7]],
                             'Errores de centros': [perr1[4],perr1[5],perr1[6],perr1[7]],
                             'Amplitud de gaussiana': [popt1[8],popt1[9],popt1[10],popt1[11]],
                             'Errores de amplitud': [perr1[8],perr1[9],perr1[10],perr1[11]],
                             'Pendiente y Ord. al origen': [popt1[12],popt1[13],' ',' '],
                             'Errores de Pend. y Ord.': [perr1[12],perr1[13],' ',' ']})
print(tabla_ajustes_1)
tabla_ajustes_1.to_csv('tabla_ajustes_conB_FD1.txt', index=None, sep='\t', mode='a')

popt2,pcov2=curve_fit(varied_gauss,tiempo5,datos5_2,p0=[0.0001,0.0001,0.0001,0.0001,
                                                    0.0009,
                                                    0.0017,
                                                    0.00261,
                                                    0.00309,
                                                    0.02,
                                                    0.02,
                                                    0.02,
                                                    0.02,1,1])
perr2=np.sqrt(np.diag(pcov2))
datos5_2_fit=varied_gauss(tiempo5,*popt2)

tabla_ajustes_2=pd.DataFrame({'Semiancho de Gaussianas': [popt2[0],popt2[1],popt2[2],popt2[3]],
                             'Errores de semiancho': [perr2[0],perr2[1],perr2[2],perr2[3]],
                             'Centros de Gaussianas': [popt2[4],popt2[5],popt2[6],popt2[7]],
                             'Errores de centros': [perr2[4],perr2[5],perr2[6],perr2[7]],
                             'Amplitud de gaussiana': [popt2[8],popt2[9],popt2[10],popt2[11]],
                             'Errores de amplitud': [perr2[8],perr2[9],perr2[10],perr2[11]],
                             'Pendiente y Ord. al origen': [popt2[12],popt2[13],' ',' '],
                             'Errores de Pend. y Ord.': [perr2[12],perr2[13],' ',' ']})
print(tabla_ajustes_2)
tabla_ajustes_2.to_csv('tabla_ajustes_conB_FD2.txt', index=None, sep='\t', mode='a')

# Plot seÃ±ales crudas
plt.figure()
plt.plot(tiempo5*1E3,datos5_1*1E3,label=r'Fotodetector $FD_1$')
plt.plot(tiempo5*1E3,datos5_2*1E3,label=r'Fotodetector $FD_2$')
plt.plot(tiempo5*1E3,datos5_1_fit*1E3,label=r'Ajuste gaussiano $FD_1$')
plt.plot(tiempo5*1E3,datos5_2_fit*1E3,label=r'Ajuste gaussiano $FD_2$')
plt.ylabel('Voltaje [mV]')
plt.xlabel('Tiempo [ms]')
plt.xlim([0,4])
plt.legend()

# Elimino rampas
datos5_1-=(popt1[-2]*tiempo5+popt1[-1])
datos5_1_fit-=(popt1[-2]*tiempo5+popt1[-1])
datos5_2-=(popt2[-2]*tiempo5+popt2[-1])
datos5_2_fit-=(popt2[-2]*tiempo5+popt2[-1])

def filt_fft(tiempo,datos,freq): # Defino funcion de filtro pasa bajos
    pbajos=int(freq*tiempo[-1])
    return np.real(np.fft.ifft(np.fft.fft(datos)*np.hstack((np.ones(pbajos),np.zeros(len(datos)-2*pbajos),np.ones(pbajos)))))

# ajusto amplitudes del canal 1 para que se parezcan en amplitud a los picos de absorcion del canal 2
datos5_1*=(1-datos5_1*17.5)

# Busco ceros en la resta canal 1 menos canal 2
ind_ceros=find_peaks(np.diff(np.sign(filt_fft(tiempo5,datos5_1-datos5_2,16.5E3))),distance=150,prominence=0.0005)[0][1:5]
print(ind_ceros)

# Normalizo ambos canales
datos5_2-=datos5_2.min()
datos5_2/=datos5_2.max()

datos5_1-=datos5_1.min()
datos5_1/=datos5_1.max()
# Obtengo la resta filtrada de las seÃ±ales ya normalizadas
datos5_resta_filtrada=filt_fft(tiempo5,datos5_1-datos5_2,106.5E3)

# Ajuste lineal para pasar de tiempo a frecuencia
coef2=np.polyfit(tiempo5[ind_ceros]*1000,centros,1)
E_h=tiempo5*1000*coef2[0]+coef2[1]

# Ploteo el ajuste lineal junto con los delta F del Rubidio
plt.figure()
plt.errorbar(np.array([tiempo5[ind_ceros[1]],tiempo5[ind_ceros[2]]])*1000,
             np.array([centros[1],centros[2]]),yerr=np.array([des[1],des[2]]), marker='^',
               mfc='red', mec='red',ecolor='red',ls='',label=r'$\Delta \bar{E}$ $^{85}$Rb [$D_1$]')
plt.errorbar(np.array([tiempo5[ind_ceros[0]],tiempo5[ind_ceros[3]]])*1000,
             np.array([centros[0],centros[3]]),yerr=np.array([des[0],des[3]]), marker='^',
               mfc='green', mec='green',ecolor='green',ls='',label=r'$\Delta \bar{E}$ $^{87}$Rb [$D_1$]')
plt.gca().yaxis.set_major_formatter(ticker.StrMethodFormatter("{x:.3f}"))
plt.plot(tiempo5*1000, E_h,'-b',label='Ajuste lineal')
plt.ylim([377.103,377.113])
plt.xlim([0.5,4])
plt.yticks(rotation = 90,va='center')
plt.text(plt.gca().get_xlim()[0]+0.5,plt.gca().get_ylim()[0]+0.001,f'E/h={coef2[0]:.2}Â·t+{coef2[1]:.6}')
plt.ylabel('E/h [THz]')
plt.xlabel('Tiempo [ms]')
plt.legend()


# Ploteo los FD con campo B junto con una medicion sin B
fig2,ax2=plt.subplots()
ax2.plot(tiempo3*1000*coef[0]+coef[1],datos3_norm,label=r'$FD$ sin $\vec{B}$')
ax2.vlines([centros[1],centros[2]],-0.3,np.array([2.2,2.2])-0.05, linestyle='dashdot',color='gray')
ax2.vlines([centros[0],centros[3]],-0.6,np.array([2.2,2.2])-0.05, linestyle='dashdot',color='gray')
ax2.plot(Saltos_85Rb_aP1_2[1:],zeros_aP1_2[1:]+1,'^r',markersize=4)
ax2.plot(Saltos_87Rb_aP1_2[1:],zeros_aP1_2[1:]+1,'^g',markersize=4)
ax2.set_xlabel(r'Frecuencia $E/h$ [THz]')
ax2.set_ylabel('AbsorciÃ³n Normalizada')
# Anotaciones
ax2.annotate('', xy=(centros[1], -0.3), xytext=(centros[2], -0.3),
            arrowprops=dict(arrowstyle='<->'))
ax2.text(np.mean([centros[1],centros[2]]), -0.25, fr'{1000*(centros[1]-centros[2]):1.4} $\pm$ {3*np.mean([perr[5]*1000*np.abs(coef[0]),perr[6]*1000*np.abs(coef[0])])*1000:0.1} GHz',
        horizontalalignment='center')
ax2.annotate('', xy=(centros[0], -0.6), xytext=(centros[3], -0.6),
            arrowprops=dict(arrowstyle='<->'))
ax2.annotate(r'$\Delta F_{(2,1^\prime)}$', xy=(Saltos_85Rb_aP1_2[1], 0.98), xytext=(Saltos_85Rb_aP1_2[1], 0.85),
            arrowprops=dict(arrowstyle='->'),ha='center')
ax2.annotate(r'$\Delta F_{(1,1^\prime)}$', xy=(Saltos_85Rb_aP1_2[2], 0.98), xytext=(Saltos_85Rb_aP1_2[2], 0.7),
            arrowprops=dict(arrowstyle='->'),ha='center')
ax2.annotate(r'$\Delta F_{(1,2^\prime)}$', xy=(Saltos_85Rb_aP1_2[3], 0.98), xytext=(Saltos_85Rb_aP1_2[3], 0.85),
            arrowprops=dict(arrowstyle='->'),ha='center')
ax2.annotate(r'$\Delta F_{(2,2^\prime)}$', xy=(Saltos_85Rb_aP1_2[4], 0.98), xytext=(Saltos_85Rb_aP1_2[4], 0.7),
            arrowprops=dict(arrowstyle='->'),ha='center')
ax2.annotate(r'$\Delta F_{(2,1^\prime)}$', xy=(Saltos_87Rb_aP1_2[1], 1.02), xytext=(Saltos_87Rb_aP1_2[1], 1.15),
            arrowprops=dict(arrowstyle='->'),ha='center')
ax2.annotate(r'$\Delta F_{(1,1^\prime)}$', xy=(Saltos_87Rb_aP1_2[2], 1.02), xytext=(Saltos_87Rb_aP1_2[2], 1.15),
            arrowprops=dict(arrowstyle='->'),ha='center')
ax2.annotate(r'$\Delta F_{(1,2^\prime)}$', xy=(Saltos_87Rb_aP1_2[3], 1.02), xytext=(Saltos_87Rb_aP1_2[3], 1.15),
            arrowprops=dict(arrowstyle='->'),ha='center')
ax2.annotate(r'$\Delta F_{(2,2^\prime)}$', xy=(Saltos_87Rb_aP1_2[4], 1.02), xytext=(Saltos_87Rb_aP1_2[4], 1.15),
            arrowprops=dict(arrowstyle='->'),ha='center')
ax2.text(np.mean([centros[0],centros[3]]), -0.55, fr'{1000*(centros[0]-centros[3]):1.4} $\pm$ {3*np.mean([perr[4]*1000*np.abs(coef[0]),perr[7]*1000*np.abs(coef[0])])*1000:0.1} GHz',
        horizontalalignment='center')

ax2.text(377.102+0.0001, 1.05, r'Sin campo $\vec{B}$')
ax2.text(377.102+0.0001, 2.25, r'Con campo $\vec{B}$')

ax2.set_xlim([377.1020,377.1140])
ax2.set_ylim([-0.75,2.5])
ax2.xaxis.set_major_formatter(ticker.StrMethodFormatter("{x:.3f}"))
ax2.set_yticks([])

secax2=ax2.secondary_xaxis('top',functions=(long_onda,long_onda))
secax2.set_xlabel('Longitud de onda $\lambda$ [nm]')
secax2.xaxis.set_major_formatter(ticker.StrMethodFormatter("{x:.3f}"))
secax2.set_xticks(long_onda(np.arange(377.1020,377.1160,0.002)))

ax2.plot(E_h,datos5_1+1.2,label=r'$FD_1$ con $\vec{B}$')
ax2.plot(E_h,datos5_2+1.2,label=r'$FD_2$ con $\vec{B}$')
ax2.plot(E_h,datos5_resta_filtrada+2.2,label=r'Dif $FD_1-FD_2$')
ax2.plot(E_h[ind_ceros],datos5_resta_filtrada[ind_ceros]+2.2,'dm',label='Ceros')
ax2.legend()

plt.show()
